import React, { useEffect, useState } from 'react';

import { bookApi } from '../api'; // Import bookApi
import { loanApi } from '../api'; // Import your loan API functions (you'll need to create these)
import { useSelector } from 'react-redux'; // If you're using Redux for user auth

import './BooksAvailable.css'; // Import the CSS file

const BooksAvailable = () => {
    const [books, setBooks] = useState([]);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(true);
    const user = useSelector(state => state.user); // Assuming you have a user slice in your Redux store
    const [member, setMember] = useState(null); // Assuming you have a member object in your Redux store
  //const userString = localStorage.getItem('user'); // Get the JSON string
  //const user = userString ? JSON.parse(userString) : null; // Parse it back to an object

  //const name = user ? user.username : null; // Safely access the token


    const handleBorrowBook = async (bookId) => {
        if (!user || !user.token) {
            setError("Please log in to borrow books.");
            return;
        }

       if (!member || !member.id) {
            console.error("Error: Member information is incomplete 1.", user);
            
            setError("Could not borrow book 1. User information is incomplete.");
            return;
        }
                console.log("Borrowing book with bookId:", bookId);
  
        console.log("User object:", user); // Log the entire user object
        //console.log("User.member:", member.name); // Log the member object
        console.log("User object:", user); // Log the entire user object
        console.log("User.member:", user.member ? user.member.name : "user.member is undefined"); // Log the member object
        console.log("User.member.id:", user.member ? user.member.id : "user.member.id is undefined"); // Log member.id or a message
        if (!user.member || !user.member.id) {
            console.error("Error: user.member or user.member.id is undefined.", user);
            setError("Could not borrow book 2. User information is incomplete.");
            return;
        }


        try {
            console.error("TRY :");
            await loanApi.borrowBook(bookId, member.id); // Assuming backend expects bookId and memberId
            // Optimistically update availableCopies in the UI
            console.error("TRY 2:");
            setBooks(prevBooks =>
                prevBooks.map(book =>
                    book.id === bookId ? { ...book, availableCopies: book.availableCopies - 1 } : book
                )
            );
            alert("Book borrowed successfully!"); // Replace with a better notification
        } catch (err) {
            console.error("Error borrowing book:", err);
            setError("Could not borrow book 3.");
        }


    };

    useEffect(() => {
        const fetchAvailableBooks = async () => {
            try {
                setLoading(true);
                const data = await bookApi.getAvailableBooks();
                console.log('\nAPI Response Data:', data); // Log the response
                console.log('\n \n '); // Log the response
                setBooks(data);
            } catch (err) {
                console.error('Error fetching available books:', err);
                setError('Could not load books.');
            } finally {
                setLoading(false);
            }
        };

        fetchAvailableBooks();
    }, []);

    if (loading) return <p>Loading books...</p>;
    if (error) return <p className="error-message">{error}</p>;

    return (
        <div className="books-available-container">
            <h2>Available Books</h2>
            {books.length === 0 ? (
                <p>No books available at the moment.</p>
            ) : (
                <ul className="books-list">
                    {books.map(book => (
                        <li key={book.id} className="book-item">
                            <strong>{book.title}</strong> by {book.author} ({book.availableCopies} copies available)
                            <button onClick={() => handleBorrowBook(book.id)}>Borrow</button>
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
};

export default BooksAvailable;